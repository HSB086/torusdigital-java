/*
 * Torus Open API
 * This is the API documentation for Torus Open API
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.OpenapiOpenAPIErrorResponse;
import io.swagger.client.model.OpenapiOpenApiOrderEntryPayload;
import io.swagger.client.model.OpenapiOpenApiOrderResponse;
import io.swagger.client.model.OpenapiOpenapiCalMarResponse;
import io.swagger.client.model.OpenapiOpenapiCallMarPayload;
import io.swagger.client.model.OpenapiOpenapiCommonReq;
import io.swagger.client.model.OpenapiOpenapiConvToDevPayload;
import io.swagger.client.model.OpenapiOpenapiOrderBookResponse;
import io.swagger.client.model.OpenapiOpenapiOrderDetailPayload;
import io.swagger.client.model.OpenapiOpenapiOrderDetailsResponse;
import io.swagger.client.model.OpenapiOpenapiOrderModifyPayload;
import io.swagger.client.model.OpenapiOpenapiResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderApi {
    private ApiClient apiClient;

    public OrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiV1OrderBookPost
     * @param body OrderBook payload (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1OrderBookPostCall(OpenapiOpenapiCommonReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/order/book";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1OrderBookPostValidateBeforeCall(OpenapiOpenapiCommonReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1OrderBookPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1OrderBookPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * OrderBook order.
     * This API will retrieve the list of orders placed for the current day. Orders initiated by the user remain active for a day and are automatically cleared after the trading session.
     * @param body OrderBook payload (required)
     * @return OpenapiOpenapiOrderBookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OpenapiOpenapiOrderBookResponse apiV1OrderBookPost(OpenapiOpenapiCommonReq body) throws ApiException {
        ApiResponse<OpenapiOpenapiOrderBookResponse> resp = apiV1OrderBookPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * OrderBook order.
     * This API will retrieve the list of orders placed for the current day. Orders initiated by the user remain active for a day and are automatically cleared after the trading session.
     * @param body OrderBook payload (required)
     * @return ApiResponse&lt;OpenapiOpenapiOrderBookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OpenapiOpenapiOrderBookResponse> apiV1OrderBookPostWithHttpInfo(OpenapiOpenapiCommonReq body) throws ApiException {
        com.squareup.okhttp.Call call = apiV1OrderBookPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OpenapiOpenapiOrderBookResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * OrderBook order. (asynchronously)
     * This API will retrieve the list of orders placed for the current day. Orders initiated by the user remain active for a day and are automatically cleared after the trading session.
     * @param body OrderBook payload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1OrderBookPostAsync(OpenapiOpenapiCommonReq body, final ApiCallback<OpenapiOpenapiOrderBookResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1OrderBookPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OpenapiOpenapiOrderBookResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1OrderCancelPost
     * @param body OrderCancel payload (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1OrderCancelPostCall(OpenapiOpenapiOrderModifyPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/order/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1OrderCancelPostValidateBeforeCall(OpenapiOpenapiOrderModifyPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1OrderCancelPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1OrderCancelPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * OrderCancel order.
     * This API cancels open or pending orders, including AMO and regular orders, and assists in exiting COs, offering traders a streamlined solution for order management.
     * @param body OrderCancel payload (required)
     * @return OpenapiOpenApiOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OpenapiOpenApiOrderResponse apiV1OrderCancelPost(OpenapiOpenapiOrderModifyPayload body) throws ApiException {
        ApiResponse<OpenapiOpenApiOrderResponse> resp = apiV1OrderCancelPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * OrderCancel order.
     * This API cancels open or pending orders, including AMO and regular orders, and assists in exiting COs, offering traders a streamlined solution for order management.
     * @param body OrderCancel payload (required)
     * @return ApiResponse&lt;OpenapiOpenApiOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OpenapiOpenApiOrderResponse> apiV1OrderCancelPostWithHttpInfo(OpenapiOpenapiOrderModifyPayload body) throws ApiException {
        com.squareup.okhttp.Call call = apiV1OrderCancelPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OpenapiOpenApiOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * OrderCancel order. (asynchronously)
     * This API cancels open or pending orders, including AMO and regular orders, and assists in exiting COs, offering traders a streamlined solution for order management.
     * @param body OrderCancel payload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1OrderCancelPostAsync(OpenapiOpenapiOrderModifyPayload body, final ApiCallback<OpenapiOpenApiOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1OrderCancelPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OpenapiOpenApiOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1OrderConvertDeliveryPost
     * @param body ConvToDel payload (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1OrderConvertDeliveryPostCall(OpenapiOpenapiConvToDevPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/order/convert/delivery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1OrderConvertDeliveryPostValidateBeforeCall(OpenapiOpenapiConvToDevPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1OrderConvertDeliveryPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1OrderConvertDeliveryPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * ConvToDel order.
     * This API converts an intraday (I) position to a delivery (C) position for a specific security on the exchange. The backend processes the request by validating the provided credentials and order details, updating the order&#x27;s status and type in the trading system, and then confirming the successful conversion.
     * @param body ConvToDel payload (required)
     * @return OpenapiOpenapiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OpenapiOpenapiResponse apiV1OrderConvertDeliveryPost(OpenapiOpenapiConvToDevPayload body) throws ApiException {
        ApiResponse<OpenapiOpenapiResponse> resp = apiV1OrderConvertDeliveryPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * ConvToDel order.
     * This API converts an intraday (I) position to a delivery (C) position for a specific security on the exchange. The backend processes the request by validating the provided credentials and order details, updating the order&#x27;s status and type in the trading system, and then confirming the successful conversion.
     * @param body ConvToDel payload (required)
     * @return ApiResponse&lt;OpenapiOpenapiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OpenapiOpenapiResponse> apiV1OrderConvertDeliveryPostWithHttpInfo(OpenapiOpenapiConvToDevPayload body) throws ApiException {
        com.squareup.okhttp.Call call = apiV1OrderConvertDeliveryPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OpenapiOpenapiResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * ConvToDel order. (asynchronously)
     * This API converts an intraday (I) position to a delivery (C) position for a specific security on the exchange. The backend processes the request by validating the provided credentials and order details, updating the order&#x27;s status and type in the trading system, and then confirming the successful conversion.
     * @param body ConvToDel payload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1OrderConvertDeliveryPostAsync(OpenapiOpenapiConvToDevPayload body, final ApiCallback<OpenapiOpenapiResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1OrderConvertDeliveryPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OpenapiOpenapiResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1OrderDetailsPost
     * @param body OrderDetails payload (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1OrderDetailsPostCall(OpenapiOpenapiOrderDetailPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/order/details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1OrderDetailsPostValidateBeforeCall(OpenapiOpenapiOrderDetailPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1OrderDetailsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1OrderDetailsPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * OrderDetails order.
     * Retrieve the latest status of a specific order through the API. Orders initiated by the user are accessible for one trading day and are automatically purged at the session&#x27;s closure
     * @param body OrderDetails payload (required)
     * @return OpenapiOpenapiOrderDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OpenapiOpenapiOrderDetailsResponse apiV1OrderDetailsPost(OpenapiOpenapiOrderDetailPayload body) throws ApiException {
        ApiResponse<OpenapiOpenapiOrderDetailsResponse> resp = apiV1OrderDetailsPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * OrderDetails order.
     * Retrieve the latest status of a specific order through the API. Orders initiated by the user are accessible for one trading day and are automatically purged at the session&#x27;s closure
     * @param body OrderDetails payload (required)
     * @return ApiResponse&lt;OpenapiOpenapiOrderDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OpenapiOpenapiOrderDetailsResponse> apiV1OrderDetailsPostWithHttpInfo(OpenapiOpenapiOrderDetailPayload body) throws ApiException {
        com.squareup.okhttp.Call call = apiV1OrderDetailsPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OpenapiOpenapiOrderDetailsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * OrderDetails order. (asynchronously)
     * Retrieve the latest status of a specific order through the API. Orders initiated by the user are accessible for one trading day and are automatically purged at the session&#x27;s closure
     * @param body OrderDetails payload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1OrderDetailsPostAsync(OpenapiOpenapiOrderDetailPayload body, final ApiCallback<OpenapiOpenapiOrderDetailsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1OrderDetailsPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OpenapiOpenapiOrderDetailsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1OrderEntryPost
     * @param body OrderEntry payload (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1OrderEntryPostCall(OpenapiOpenApiOrderEntryPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/order/entry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1OrderEntryPostValidateBeforeCall(OpenapiOpenApiOrderEntryPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1OrderEntryPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1OrderEntryPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * OrderEntry order.
     * Allows clients to place new orders in the trading system. Requires comprehensive details such as client identification, order specifications (product, quantity, price, type), exchange and market parameters, and validity period.
     * @param body OrderEntry payload (required)
     * @return OpenapiOpenApiOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OpenapiOpenApiOrderResponse apiV1OrderEntryPost(OpenapiOpenApiOrderEntryPayload body) throws ApiException {
        ApiResponse<OpenapiOpenApiOrderResponse> resp = apiV1OrderEntryPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * OrderEntry order.
     * Allows clients to place new orders in the trading system. Requires comprehensive details such as client identification, order specifications (product, quantity, price, type), exchange and market parameters, and validity period.
     * @param body OrderEntry payload (required)
     * @return ApiResponse&lt;OpenapiOpenApiOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OpenapiOpenApiOrderResponse> apiV1OrderEntryPostWithHttpInfo(OpenapiOpenApiOrderEntryPayload body) throws ApiException {
        com.squareup.okhttp.Call call = apiV1OrderEntryPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OpenapiOpenApiOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * OrderEntry order. (asynchronously)
     * Allows clients to place new orders in the trading system. Requires comprehensive details such as client identification, order specifications (product, quantity, price, type), exchange and market parameters, and validity period.
     * @param body OrderEntry payload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1OrderEntryPostAsync(OpenapiOpenApiOrderEntryPayload body, final ApiCallback<OpenapiOpenApiOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1OrderEntryPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OpenapiOpenApiOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1OrderMarginCalculatePost
     * @param body CalculateOrdermargin payload (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1OrderMarginCalculatePostCall(OpenapiOpenapiCallMarPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/order/margin/calculate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1OrderMarginCalculatePostValidateBeforeCall(OpenapiOpenapiCallMarPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1OrderMarginCalculatePost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1OrderMarginCalculatePostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * CalculateOrdermargin order.
     * Margin Calculator API delivers the real time margin calculations for a basket of positions.
     * @param body CalculateOrdermargin payload (required)
     * @return OpenapiOpenapiCalMarResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OpenapiOpenapiCalMarResponse apiV1OrderMarginCalculatePost(OpenapiOpenapiCallMarPayload body) throws ApiException {
        ApiResponse<OpenapiOpenapiCalMarResponse> resp = apiV1OrderMarginCalculatePostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * CalculateOrdermargin order.
     * Margin Calculator API delivers the real time margin calculations for a basket of positions.
     * @param body CalculateOrdermargin payload (required)
     * @return ApiResponse&lt;OpenapiOpenapiCalMarResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OpenapiOpenapiCalMarResponse> apiV1OrderMarginCalculatePostWithHttpInfo(OpenapiOpenapiCallMarPayload body) throws ApiException {
        com.squareup.okhttp.Call call = apiV1OrderMarginCalculatePostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OpenapiOpenapiCalMarResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * CalculateOrdermargin order. (asynchronously)
     * Margin Calculator API delivers the real time margin calculations for a basket of positions.
     * @param body CalculateOrdermargin payload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1OrderMarginCalculatePostAsync(OpenapiOpenapiCallMarPayload body, final ApiCallback<OpenapiOpenapiCalMarResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1OrderMarginCalculatePostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OpenapiOpenapiCalMarResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1OrderModifyPost
     * @param body OrderModify payload (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1OrderModifyPostCall(OpenapiOpenapiOrderModifyPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/order/modify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1OrderModifyPostValidateBeforeCall(OpenapiOpenapiOrderModifyPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1OrderModifyPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1OrderModifyPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * OrderModify order.
     * API for order modification allows users to alter an open or pending order by providing the orderId along with any optional parameters needing adjustment. If no opI to place an order to the exchange.
     * @param body OrderModify payload (required)
     * @return OpenapiOpenApiOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OpenapiOpenApiOrderResponse apiV1OrderModifyPost(OpenapiOpenapiOrderModifyPayload body) throws ApiException {
        ApiResponse<OpenapiOpenApiOrderResponse> resp = apiV1OrderModifyPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * OrderModify order.
     * API for order modification allows users to alter an open or pending order by providing the orderId along with any optional parameters needing adjustment. If no opI to place an order to the exchange.
     * @param body OrderModify payload (required)
     * @return ApiResponse&lt;OpenapiOpenApiOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OpenapiOpenApiOrderResponse> apiV1OrderModifyPostWithHttpInfo(OpenapiOpenapiOrderModifyPayload body) throws ApiException {
        com.squareup.okhttp.Call call = apiV1OrderModifyPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OpenapiOpenApiOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * OrderModify order. (asynchronously)
     * API for order modification allows users to alter an open or pending order by providing the orderId along with any optional parameters needing adjustment. If no opI to place an order to the exchange.
     * @param body OrderModify payload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1OrderModifyPostAsync(OpenapiOpenapiOrderModifyPayload body, final ApiCallback<OpenapiOpenApiOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1OrderModifyPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OpenapiOpenApiOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
