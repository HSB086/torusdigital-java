/*
 * Torus Open API
 * This is the API documentation for Torus Open API
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.OpenapiOpenAPIErrorResponse;
import io.swagger.client.model.OpenapiOpenApiHoldingDetailsResponse;
import io.swagger.client.model.OpenapiOpenapiCommonReq;
import io.swagger.client.model.OpenapiOpenapiResponse;
import io.swagger.client.model.OpenapiOpenapiUpdatePayOutPayload;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HoldingsApi {
    private ApiClient apiClient;

    public HoldingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HoldingsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiV1HoldingsPost
     * @param body holdings payload (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1HoldingsPostCall(OpenapiOpenapiCommonReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/holdings/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1HoldingsPostValidateBeforeCall(OpenapiOpenapiCommonReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1HoldingsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1HoldingsPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Holdings holdings.
     * The API retrieves the user&#x27;s long-term holdings, kept in the DEMAT account until sold, removed from the exchange, or changed by stock exchange rules, ensuring regulatory compliance.
     * @param body holdings payload (required)
     * @return OpenapiOpenApiHoldingDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OpenapiOpenApiHoldingDetailsResponse apiV1HoldingsPost(OpenapiOpenapiCommonReq body) throws ApiException {
        ApiResponse<OpenapiOpenApiHoldingDetailsResponse> resp = apiV1HoldingsPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Holdings holdings.
     * The API retrieves the user&#x27;s long-term holdings, kept in the DEMAT account until sold, removed from the exchange, or changed by stock exchange rules, ensuring regulatory compliance.
     * @param body holdings payload (required)
     * @return ApiResponse&lt;OpenapiOpenApiHoldingDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OpenapiOpenApiHoldingDetailsResponse> apiV1HoldingsPostWithHttpInfo(OpenapiOpenapiCommonReq body) throws ApiException {
        com.squareup.okhttp.Call call = apiV1HoldingsPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OpenapiOpenApiHoldingDetailsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Holdings holdings. (asynchronously)
     * The API retrieves the user&#x27;s long-term holdings, kept in the DEMAT account until sold, removed from the exchange, or changed by stock exchange rules, ensuring regulatory compliance.
     * @param body holdings payload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1HoldingsPostAsync(OpenapiOpenapiCommonReq body, final ApiCallback<OpenapiOpenApiHoldingDetailsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1HoldingsPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OpenapiOpenApiHoldingDetailsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1HoldingsUpdatePayoutPost
     * @param body UpdatePayOut payload (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1HoldingsUpdatePayoutPostCall(OpenapiOpenapiUpdatePayOutPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/holdings/update-payout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1HoldingsUpdatePayoutPostValidateBeforeCall(OpenapiOpenapiUpdatePayOutPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1HoldingsUpdatePayoutPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1HoldingsUpdatePayoutPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * UpdatePayOut holdings.
     * The Holding Update PayOut API endpoint processes a request to update payout details for a specified holding by ISIN ID, and it returns the updated holding quantities and status. This ensures accurate tracking of holding quantities post-update.
     * @param body UpdatePayOut payload (required)
     * @return OpenapiOpenapiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OpenapiOpenapiResponse apiV1HoldingsUpdatePayoutPost(OpenapiOpenapiUpdatePayOutPayload body) throws ApiException {
        ApiResponse<OpenapiOpenapiResponse> resp = apiV1HoldingsUpdatePayoutPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * UpdatePayOut holdings.
     * The Holding Update PayOut API endpoint processes a request to update payout details for a specified holding by ISIN ID, and it returns the updated holding quantities and status. This ensures accurate tracking of holding quantities post-update.
     * @param body UpdatePayOut payload (required)
     * @return ApiResponse&lt;OpenapiOpenapiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OpenapiOpenapiResponse> apiV1HoldingsUpdatePayoutPostWithHttpInfo(OpenapiOpenapiUpdatePayOutPayload body) throws ApiException {
        com.squareup.okhttp.Call call = apiV1HoldingsUpdatePayoutPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OpenapiOpenapiResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * UpdatePayOut holdings. (asynchronously)
     * The Holding Update PayOut API endpoint processes a request to update payout details for a specified holding by ISIN ID, and it returns the updated holding quantities and status. This ensures accurate tracking of holding quantities post-update.
     * @param body UpdatePayOut payload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1HoldingsUpdatePayoutPostAsync(OpenapiOpenapiUpdatePayOutPayload body, final ApiCallback<OpenapiOpenapiResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1HoldingsUpdatePayoutPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OpenapiOpenapiResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
