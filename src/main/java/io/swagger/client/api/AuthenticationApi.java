/*
 * Torus Open API
 * This is the API documentation for Torus Open API
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.OpenapiOpenAPIAuthenticateResponse;
import io.swagger.client.model.OpenapiOpenAPIErrorResponse;
import io.swagger.client.model.OpenapiOpenApiAuthPayload;
import io.swagger.client.model.OpenapiOpenapiAuthPassResponse;
import io.swagger.client.model.OpenapiOpenapiCommonReq;
import io.swagger.client.model.OpenapiOpenapiResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationApi {
    private ApiClient apiClient;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiV1UserAuthPassauthPost
     * @param body AuthenticationPassAuth payload (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1UserAuthPassauthPostCall(OpenapiOpenapiCommonReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/user/auth/passauth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1UserAuthPassauthPostValidateBeforeCall(OpenapiOpenapiCommonReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1UserAuthPassauthPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1UserAuthPassauthPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * AuthenticationPassAuth user.
     * Authenticates a user by verifying their provided credentials, such as a username and password.This API is likely used for secure user login and access control within the application or system.
     * @param body AuthenticationPassAuth payload (required)
     * @return OpenapiOpenapiAuthPassResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OpenapiOpenapiAuthPassResponse apiV1UserAuthPassauthPost(OpenapiOpenapiCommonReq body) throws ApiException {
        ApiResponse<OpenapiOpenapiAuthPassResponse> resp = apiV1UserAuthPassauthPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * AuthenticationPassAuth user.
     * Authenticates a user by verifying their provided credentials, such as a username and password.This API is likely used for secure user login and access control within the application or system.
     * @param body AuthenticationPassAuth payload (required)
     * @return ApiResponse&lt;OpenapiOpenapiAuthPassResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OpenapiOpenapiAuthPassResponse> apiV1UserAuthPassauthPostWithHttpInfo(OpenapiOpenapiCommonReq body) throws ApiException {
        com.squareup.okhttp.Call call = apiV1UserAuthPassauthPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OpenapiOpenapiAuthPassResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * AuthenticationPassAuth user. (asynchronously)
     * Authenticates a user by verifying their provided credentials, such as a username and password.This API is likely used for secure user login and access control within the application or system.
     * @param body AuthenticationPassAuth payload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1UserAuthPassauthPostAsync(OpenapiOpenapiCommonReq body, final ApiCallback<OpenapiOpenapiAuthPassResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1UserAuthPassauthPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OpenapiOpenapiAuthPassResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1UserAuthPost
     * @param body Authentication payload (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1UserAuthPostCall(OpenapiOpenApiAuthPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/user/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1UserAuthPostValidateBeforeCall(OpenapiOpenApiAuthPayload body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1UserAuthPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1UserAuthPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Authenticate user.
     * All authentication processes are managed through torusdigital.com. There are no public endpoints available for third-party applications to directly log users into TorusDigital. This approach ensures security and compliance, with all logins and logouts handled exclusively by torusdigital.com
     * @param body Authentication payload (required)
     * @return OpenapiOpenAPIAuthenticateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OpenapiOpenAPIAuthenticateResponse apiV1UserAuthPost(OpenapiOpenApiAuthPayload body) throws ApiException {
        ApiResponse<OpenapiOpenAPIAuthenticateResponse> resp = apiV1UserAuthPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Authenticate user.
     * All authentication processes are managed through torusdigital.com. There are no public endpoints available for third-party applications to directly log users into TorusDigital. This approach ensures security and compliance, with all logins and logouts handled exclusively by torusdigital.com
     * @param body Authentication payload (required)
     * @return ApiResponse&lt;OpenapiOpenAPIAuthenticateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OpenapiOpenAPIAuthenticateResponse> apiV1UserAuthPostWithHttpInfo(OpenapiOpenApiAuthPayload body) throws ApiException {
        com.squareup.okhttp.Call call = apiV1UserAuthPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OpenapiOpenAPIAuthenticateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Authenticate user. (asynchronously)
     * All authentication processes are managed through torusdigital.com. There are no public endpoints available for third-party applications to directly log users into TorusDigital. This approach ensures security and compliance, with all logins and logouts handled exclusively by torusdigital.com
     * @param body Authentication payload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1UserAuthPostAsync(OpenapiOpenApiAuthPayload body, final ApiCallback<OpenapiOpenAPIAuthenticateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1UserAuthPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OpenapiOpenAPIAuthenticateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV1UserAuthSessionPost
     * @param body AuthenticateSession payload (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV1UserAuthSessionPostCall(OpenapiOpenapiCommonReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/api/v1/user/auth/session";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV1UserAuthSessionPostValidateBeforeCall(OpenapiOpenapiCommonReq body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling apiV1UserAuthSessionPost(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV1UserAuthSessionPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * AuthenticateSession user.
     * This API is used to maintain secure authenticated sessions and verify user access across multiple requests or pages within the application.
     * @param body AuthenticateSession payload (required)
     * @return OpenapiOpenapiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OpenapiOpenapiResponse apiV1UserAuthSessionPost(OpenapiOpenapiCommonReq body) throws ApiException {
        ApiResponse<OpenapiOpenapiResponse> resp = apiV1UserAuthSessionPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * AuthenticateSession user.
     * This API is used to maintain secure authenticated sessions and verify user access across multiple requests or pages within the application.
     * @param body AuthenticateSession payload (required)
     * @return ApiResponse&lt;OpenapiOpenapiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OpenapiOpenapiResponse> apiV1UserAuthSessionPostWithHttpInfo(OpenapiOpenapiCommonReq body) throws ApiException {
        com.squareup.okhttp.Call call = apiV1UserAuthSessionPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OpenapiOpenapiResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * AuthenticateSession user. (asynchronously)
     * This API is used to maintain secure authenticated sessions and verify user access across multiple requests or pages within the application.
     * @param body AuthenticateSession payload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1UserAuthSessionPostAsync(OpenapiOpenapiCommonReq body, final ApiCallback<OpenapiOpenapiResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1UserAuthSessionPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OpenapiOpenapiResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
